import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/react-resizable-panels/dist/react-resizable-panels.browser.development.esm.js
var React = __toESM(require_react());
var {
  createElement,
  createContext,
  forwardRef,
  useCallback,
  useContext,
  useEffect,
  useImperativeHandle,
  useLayoutEffect,
  useMemo,
  useRef,
  useState
} = React;
var useId = React["useId".toString()];
var useIsomorphicLayoutEffect = useLayoutEffect;
var wrappedUseId = typeof useId === "function" ? useId : () => null;
var counter = 0;
function useUniqueId(idFromParams = null) {
  const idFromUseId = wrappedUseId();
  const idRef = useRef(idFromParams || idFromUseId || null);
  if (idRef.current === null) {
    idRef.current = "" + counter++;
  }
  return idRef.current;
}
var PanelGroupContext = createContext(null);
PanelGroupContext.displayName = "PanelGroupContext";
function PanelWithForwardedRef({
  children = null,
  className: classNameFromProps = "",
  collapsedSize = 0,
  collapsible = false,
  defaultSize = null,
  forwardedRef,
  id: idFromProps = null,
  maxSize = null,
  minSize,
  onCollapse = null,
  onResize = null,
  order = null,
  style: styleFromProps = {},
  tagName: Type = "div"
}) {
  const context = useContext(PanelGroupContext);
  if (context === null) {
    throw Error(`Panel components must be rendered within a PanelGroup container`);
  }
  const panelId = useUniqueId(idFromProps);
  const {
    collapsePanel,
    expandPanel,
    getPanelSize,
    getPanelStyle,
    registerPanel,
    resizePanel,
    units,
    unregisterPanel
  } = context;
  if (minSize == null) {
    if (units === "percentages") {
      minSize = 10;
    } else {
      minSize = 0;
    }
  }
  const callbacksRef = useRef({
    onCollapse,
    onResize
  });
  useEffect(() => {
    callbacksRef.current.onCollapse = onCollapse;
    callbacksRef.current.onResize = onResize;
  });
  const style = getPanelStyle(panelId, defaultSize);
  const committedValuesRef = useRef({
    size: parseSizeFromStyle(style)
  });
  const panelDataRef = useRef({
    callbacksRef,
    collapsedSize,
    collapsible,
    defaultSize,
    id: panelId,
    idWasAutoGenerated: idFromProps == null,
    maxSize,
    minSize,
    order
  });
  useIsomorphicLayoutEffect(() => {
    committedValuesRef.current.size = parseSizeFromStyle(style);
    panelDataRef.current.callbacksRef = callbacksRef;
    panelDataRef.current.collapsedSize = collapsedSize;
    panelDataRef.current.collapsible = collapsible;
    panelDataRef.current.defaultSize = defaultSize;
    panelDataRef.current.id = panelId;
    panelDataRef.current.idWasAutoGenerated = idFromProps == null;
    panelDataRef.current.maxSize = maxSize;
    panelDataRef.current.minSize = minSize;
    panelDataRef.current.order = order;
  });
  useIsomorphicLayoutEffect(() => {
    registerPanel(panelId, panelDataRef);
    return () => {
      unregisterPanel(panelId);
    };
  }, [order, panelId, registerPanel, unregisterPanel]);
  useImperativeHandle(forwardedRef, () => ({
    collapse: () => collapsePanel(panelId),
    expand: () => expandPanel(panelId),
    getCollapsed() {
      return committedValuesRef.current.size === 0;
    },
    getId() {
      return panelId;
    },
    getSize(units2) {
      return getPanelSize(panelId, units2);
    },
    resize: (percentage, units2) => resizePanel(panelId, percentage, units2)
  }), [collapsePanel, expandPanel, getPanelSize, panelId, resizePanel]);
  return createElement(Type, {
    children,
    className: classNameFromProps,
    "data-panel": "",
    "data-panel-collapsible": collapsible || void 0,
    "data-panel-id": panelId,
    "data-panel-size": parseFloat("" + style.flexGrow).toFixed(1),
    id: `data-panel-id-${panelId}`,
    style: {
      ...style,
      ...styleFromProps
    }
  });
}
var Panel = forwardRef((props, ref) => createElement(PanelWithForwardedRef, {
  ...props,
  forwardedRef: ref
}));
PanelWithForwardedRef.displayName = "Panel";
Panel.displayName = "forwardRef(Panel)";
function parseSizeFromStyle(style) {
  const {
    flexGrow
  } = style;
  if (typeof flexGrow === "string") {
    return parseFloat(flexGrow);
  } else {
    return flexGrow;
  }
}
var PRECISION = 10;
function adjustByDelta(event, committedValues, idBefore, idAfter, deltaPixels, prevSizes, panelSizeBeforeCollapse, initialDragState) {
  const {
    id: groupId,
    panels,
    units
  } = committedValues;
  const groupSizePixels = units === "pixels" ? getAvailableGroupSizePixels(groupId) : NaN;
  const {
    sizes: initialSizes
  } = initialDragState || {};
  const baseSizes = initialSizes || prevSizes;
  const panelsArray = panelsMapToSortedArray(panels);
  const nextSizes = baseSizes.concat();
  let deltaApplied = 0;
  {
    const pivotId2 = deltaPixels < 0 ? idAfter : idBefore;
    const index2 = panelsArray.findIndex((panel2) => panel2.current.id === pivotId2);
    const panel = panelsArray[index2];
    const baseSize = baseSizes[index2];
    const nextSize = safeResizePanel(units, groupSizePixels, panel, baseSize, baseSize + Math.abs(deltaPixels), event);
    if (baseSize === nextSize) {
      return baseSizes;
    } else {
      if (nextSize === 0 && baseSize > 0) {
        panelSizeBeforeCollapse.set(pivotId2, baseSize);
      }
      deltaPixels = deltaPixels < 0 ? baseSize - nextSize : nextSize - baseSize;
    }
  }
  let pivotId = deltaPixels < 0 ? idBefore : idAfter;
  let index = panelsArray.findIndex((panel) => panel.current.id === pivotId);
  while (true) {
    const panel = panelsArray[index];
    const baseSize = baseSizes[index];
    const deltaRemaining = Math.abs(deltaPixels) - Math.abs(deltaApplied);
    const nextSize = safeResizePanel(units, groupSizePixels, panel, baseSize, baseSize - deltaRemaining, event);
    if (baseSize !== nextSize) {
      if (nextSize === 0 && baseSize > 0) {
        panelSizeBeforeCollapse.set(panel.current.id, baseSize);
      }
      deltaApplied += baseSize - nextSize;
      nextSizes[index] = nextSize;
      if (deltaApplied.toPrecision(PRECISION).localeCompare(Math.abs(deltaPixels).toPrecision(PRECISION), void 0, {
        numeric: true
      }) >= 0) {
        break;
      }
    }
    if (deltaPixels < 0) {
      if (--index < 0) {
        break;
      }
    } else {
      if (++index >= panelsArray.length) {
        break;
      }
    }
  }
  if (deltaApplied === 0) {
    return baseSizes;
  }
  pivotId = deltaPixels < 0 ? idAfter : idBefore;
  index = panelsArray.findIndex((panel) => panel.current.id === pivotId);
  nextSizes[index] = baseSizes[index] + deltaApplied;
  return nextSizes;
}
function callPanelCallbacks(panelsArray, sizes, panelIdToLastNotifiedSizeMap) {
  sizes.forEach((size, index) => {
    const panelRef = panelsArray[index];
    if (!panelRef) {
      return;
    }
    const {
      callbacksRef,
      collapsedSize,
      collapsible,
      id
    } = panelRef.current;
    const lastNotifiedSize = panelIdToLastNotifiedSizeMap[id];
    if (lastNotifiedSize !== size) {
      panelIdToLastNotifiedSizeMap[id] = size;
      const {
        onCollapse,
        onResize
      } = callbacksRef.current;
      if (onResize) {
        onResize(size, lastNotifiedSize);
      }
      if (collapsible && onCollapse) {
        if ((lastNotifiedSize == null || lastNotifiedSize === collapsedSize) && size !== collapsedSize) {
          onCollapse(false);
        } else if (lastNotifiedSize !== collapsedSize && size === collapsedSize) {
          onCollapse(true);
        }
      }
    }
  });
}
function calculateDefaultLayout({
  groupId,
  panels,
  units
}) {
  const groupSizePixels = units === "pixels" ? getAvailableGroupSizePixels(groupId) : NaN;
  const panelsArray = panelsMapToSortedArray(panels);
  const sizes = Array(panelsArray.length);
  let numPanelsWithSizes = 0;
  let remainingSize = 100;
  for (let index = 0; index < panelsArray.length; index++) {
    const panel = panelsArray[index];
    const {
      defaultSize
    } = panel.current;
    if (defaultSize != null) {
      numPanelsWithSizes++;
      sizes[index] = units === "pixels" ? defaultSize / groupSizePixels * 100 : defaultSize;
      remainingSize -= sizes[index];
    }
  }
  for (let index = 0; index < panelsArray.length; index++) {
    const panel = panelsArray[index];
    let {
      defaultSize,
      id,
      maxSize,
      minSize
    } = panel.current;
    if (defaultSize != null) {
      continue;
    }
    if (units === "pixels") {
      minSize = minSize / groupSizePixels * 100;
      if (maxSize != null) {
        maxSize = maxSize / groupSizePixels * 100;
      }
    }
    const remainingPanels = panelsArray.length - numPanelsWithSizes;
    const size = Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, remainingSize / remainingPanels));
    sizes[index] = size;
    numPanelsWithSizes++;
    remainingSize -= size;
  }
  if (remainingSize !== 0) {
    for (let index = 0; index < panelsArray.length; index++) {
      const panel = panelsArray[index];
      let {
        maxSize,
        minSize
      } = panel.current;
      if (units === "pixels") {
        minSize = minSize / groupSizePixels * 100;
        if (maxSize != null) {
          maxSize = maxSize / groupSizePixels * 100;
        }
      }
      const size = Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, sizes[index] + remainingSize));
      if (size !== sizes[index]) {
        remainingSize -= size - sizes[index];
        sizes[index] = size;
        if (Math.abs(remainingSize).toFixed(3) === "0.000") {
          break;
        }
      }
    }
  }
  if (Math.abs(remainingSize).toFixed(3) !== "0.000") {
    {
      console.error(`Invalid panel group configuration; default panel sizes should total 100% but was ${(100 - remainingSize).toFixed(1)}%. This can cause the cursor to become misaligned while dragging.`);
    }
  }
  return sizes;
}
function getBeforeAndAfterIds(id, panelsArray) {
  if (panelsArray.length < 2) {
    return [null, null];
  }
  const index = panelsArray.findIndex((panel) => panel.current.id === id);
  if (index < 0) {
    return [null, null];
  }
  const isLastPanel = index === panelsArray.length - 1;
  const idBefore = isLastPanel ? panelsArray[index - 1].current.id : id;
  const idAfter = isLastPanel ? id : panelsArray[index + 1].current.id;
  return [idBefore, idAfter];
}
function getAvailableGroupSizePixels(groupId) {
  const panelGroupElement = getPanelGroup(groupId);
  if (panelGroupElement == null) {
    return NaN;
  }
  const direction = panelGroupElement.getAttribute("data-panel-group-direction");
  const resizeHandles = getResizeHandlesForGroup(groupId);
  if (direction === "horizontal") {
    return panelGroupElement.offsetWidth - resizeHandles.reduce((accumulated, handle) => {
      return accumulated + handle.offsetWidth;
    }, 0);
  } else {
    return panelGroupElement.offsetHeight - resizeHandles.reduce((accumulated, handle) => {
      return accumulated + handle.offsetHeight;
    }, 0);
  }
}
function getFlexGrow(panels, id, sizes) {
  if (panels.size === 1) {
    return "100";
  }
  const panelsArray = panelsMapToSortedArray(panels);
  const index = panelsArray.findIndex((panel) => panel.current.id === id);
  const size = sizes[index];
  if (size == null) {
    return "0";
  }
  return size.toPrecision(PRECISION);
}
function getPanel(id) {
  const element2 = document.querySelector(`[data-panel-id="${id}"]`);
  if (element2) {
    return element2;
  }
  return null;
}
function getPanelGroup(id) {
  const element2 = document.querySelector(`[data-panel-group-id="${id}"]`);
  if (element2) {
    return element2;
  }
  return null;
}
function getResizeHandle(id) {
  const element2 = document.querySelector(`[data-panel-resize-handle-id="${id}"]`);
  if (element2) {
    return element2;
  }
  return null;
}
function getResizeHandleIndex(id) {
  const handles = getResizeHandles();
  const index = handles.findIndex((handle) => handle.getAttribute("data-panel-resize-handle-id") === id);
  return index ?? null;
}
function getResizeHandles() {
  return Array.from(document.querySelectorAll(`[data-panel-resize-handle-id]`));
}
function getResizeHandlesForGroup(groupId) {
  return Array.from(document.querySelectorAll(`[data-panel-resize-handle-id][data-panel-group-id="${groupId}"]`));
}
function getResizeHandlePanelIds(groupId, handleId, panelsArray) {
  var _a, _b, _c, _d;
  const handle = getResizeHandle(handleId);
  const handles = getResizeHandlesForGroup(groupId);
  const index = handle ? handles.indexOf(handle) : -1;
  const idBefore = ((_b = (_a = panelsArray[index]) == null ? void 0 : _a.current) == null ? void 0 : _b.id) ?? null;
  const idAfter = ((_d = (_c = panelsArray[index + 1]) == null ? void 0 : _c.current) == null ? void 0 : _d.id) ?? null;
  return [idBefore, idAfter];
}
function panelsMapToSortedArray(panels) {
  return Array.from(panels.values()).sort((panelA, panelB) => {
    const orderA = panelA.current.order;
    const orderB = panelB.current.order;
    if (orderA == null && orderB == null) {
      return 0;
    } else if (orderA == null) {
      return -1;
    } else if (orderB == null) {
      return 1;
    } else {
      return orderA - orderB;
    }
  });
}
function safeResizePanel(units, groupSizePixels, panel, prevSize, nextSize, event = null) {
  var _a;
  let {
    collapsedSize,
    collapsible,
    maxSize,
    minSize
  } = panel.current;
  if (units === "pixels") {
    collapsedSize = collapsedSize / groupSizePixels * 100;
    if (maxSize != null) {
      maxSize = maxSize / groupSizePixels * 100;
    }
    minSize = minSize / groupSizePixels * 100;
  }
  if (collapsible) {
    if (prevSize > collapsedSize) {
      if (nextSize <= minSize / 2 + collapsedSize) {
        return collapsedSize;
      }
    } else {
      const isKeyboardEvent = (_a = event == null ? void 0 : event.type) == null ? void 0 : _a.startsWith("key");
      if (!isKeyboardEvent) {
        if (nextSize < minSize) {
          return collapsedSize;
        }
      }
    }
  }
  return Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, nextSize));
}
function validatePanelProps(units, panelData) {
  const {
    collapsible,
    defaultSize,
    maxSize,
    minSize
  } = panelData.current;
  if (minSize < 0 || units === "percentages" && minSize > 100) {
    {
      console.error(`Invalid Panel minSize provided, ${minSize}`);
    }
    panelData.current.minSize = 0;
  }
  if (maxSize != null) {
    if (maxSize < 0 || units === "percentages" && maxSize > 100) {
      {
        console.error(`Invalid Panel maxSize provided, ${maxSize}`);
      }
      panelData.current.maxSize = null;
    }
  }
  if (defaultSize !== null) {
    if (defaultSize < 0 || units === "percentages" && defaultSize > 100) {
      {
        console.error(`Invalid Panel defaultSize provided, ${defaultSize}`);
      }
      panelData.current.defaultSize = null;
    } else if (defaultSize < minSize && !collapsible) {
      {
        console.error(`Panel minSize (${minSize}) cannot be greater than defaultSize (${defaultSize})`);
      }
      panelData.current.defaultSize = minSize;
    } else if (maxSize != null && defaultSize > maxSize) {
      {
        console.error(`Panel maxSize (${maxSize}) cannot be less than defaultSize (${defaultSize})`);
      }
      panelData.current.defaultSize = maxSize;
    }
  }
}
function validatePanelGroupLayout({
  groupId,
  panels,
  nextSizes,
  prevSizes,
  units
}) {
  nextSizes = [...nextSizes];
  const panelsArray = panelsMapToSortedArray(panels);
  const groupSizePixels = units === "pixels" ? getAvailableGroupSizePixels(groupId) : NaN;
  let remainingSize = 0;
  for (let index = 0; index < panelsArray.length; index++) {
    const panel = panelsArray[index];
    const prevSize = prevSizes[index];
    const nextSize = nextSizes[index];
    const safeNextSize = safeResizePanel(units, groupSizePixels, panel, prevSize, nextSize);
    if (nextSize != safeNextSize) {
      remainingSize += nextSize - safeNextSize;
      nextSizes[index] = safeNextSize;
      {
        console.error(`Invalid size (${nextSize}) specified for Panel "${panel.current.id}" given the panel's min/max size constraints`);
      }
    }
  }
  if (remainingSize.toFixed(3) !== "0.000") {
    for (let index = 0; index < panelsArray.length; index++) {
      const panel = panelsArray[index];
      let {
        maxSize,
        minSize
      } = panel.current;
      if (units === "pixels") {
        minSize = minSize / groupSizePixels * 100;
        if (maxSize != null) {
          maxSize = maxSize / groupSizePixels * 100;
        }
      }
      const size = Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, nextSizes[index] + remainingSize));
      if (size !== nextSizes[index]) {
        remainingSize -= size - nextSizes[index];
        nextSizes[index] = size;
        if (Math.abs(remainingSize).toFixed(3) === "0.000") {
          break;
        }
      }
    }
  }
  if (remainingSize.toFixed(3) !== "0.000") {
    {
      console.error(`"Invalid panel group configuration; default panel sizes should total 100% but was ${100 - remainingSize}%`);
    }
  }
  return nextSizes;
}
function assert(expectedCondition, message = "Assertion failed!") {
  if (!expectedCondition) {
    console.error(message);
    throw Error(message);
  }
}
function useWindowSplitterPanelGroupBehavior({
  committedValuesRef,
  groupId,
  panels,
  setSizes,
  sizes,
  panelSizeBeforeCollapse
}) {
  useEffect(() => {
    const {
      direction,
      panels: panels2
    } = committedValuesRef.current;
    const groupElement = getPanelGroup(groupId);
    assert(groupElement != null, `No group found for id "${groupId}"`);
    const {
      height,
      width
    } = groupElement.getBoundingClientRect();
    const handles = getResizeHandlesForGroup(groupId);
    const cleanupFunctions = handles.map((handle) => {
      const handleId = handle.getAttribute("data-panel-resize-handle-id");
      const panelsArray = panelsMapToSortedArray(panels2);
      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);
      if (idBefore == null || idAfter == null) {
        return () => {
        };
      }
      let currentMinSize = 0;
      let currentMaxSize = 100;
      let totalMinSize = 0;
      let totalMaxSize = 0;
      panelsArray.forEach((panelData) => {
        const {
          id,
          maxSize,
          minSize
        } = panelData.current;
        if (id === idBefore) {
          currentMinSize = minSize;
          currentMaxSize = maxSize != null ? maxSize : 100;
        } else {
          totalMinSize += minSize;
          totalMaxSize += maxSize != null ? maxSize : 100;
        }
      });
      const ariaValueMax = Math.min(currentMaxSize, 100 - totalMinSize);
      const ariaValueMin = Math.max(currentMinSize, (panelsArray.length - 1) * 100 - totalMaxSize);
      const flexGrow = getFlexGrow(panels2, idBefore, sizes);
      handle.setAttribute("aria-valuemax", "" + Math.round(ariaValueMax));
      handle.setAttribute("aria-valuemin", "" + Math.round(ariaValueMin));
      handle.setAttribute("aria-valuenow", "" + Math.round(parseInt(flexGrow)));
      const onKeyDown = (event) => {
        if (event.defaultPrevented) {
          return;
        }
        switch (event.key) {
          case "Enter": {
            event.preventDefault();
            const index = panelsArray.findIndex((panel) => panel.current.id === idBefore);
            if (index >= 0) {
              const panelData = panelsArray[index];
              const size = sizes[index];
              if (size != null) {
                let delta = 0;
                if (size.toPrecision(PRECISION) <= panelData.current.minSize.toPrecision(PRECISION)) {
                  delta = direction === "horizontal" ? width : height;
                } else {
                  delta = -(direction === "horizontal" ? width : height);
                }
                const nextSizes = adjustByDelta(event, committedValuesRef.current, idBefore, idAfter, delta, sizes, panelSizeBeforeCollapse.current, null);
                if (sizes !== nextSizes) {
                  setSizes(nextSizes);
                }
              }
            }
            break;
          }
        }
      };
      handle.addEventListener("keydown", onKeyDown);
      const panelBefore = getPanel(idBefore);
      if (panelBefore != null) {
        handle.setAttribute("aria-controls", panelBefore.id);
      }
      return () => {
        handle.removeAttribute("aria-valuemax");
        handle.removeAttribute("aria-valuemin");
        handle.removeAttribute("aria-valuenow");
        handle.removeEventListener("keydown", onKeyDown);
        if (panelBefore != null) {
          handle.removeAttribute("aria-controls");
        }
      };
    });
    return () => {
      cleanupFunctions.forEach((cleanupFunction) => cleanupFunction());
    };
  }, [committedValuesRef, groupId, panels, panelSizeBeforeCollapse, setSizes, sizes]);
}
function useWindowSplitterResizeHandlerBehavior({
  disabled,
  handleId,
  resizeHandler
}) {
  useEffect(() => {
    if (disabled || resizeHandler == null) {
      return;
    }
    const handleElement = getResizeHandle(handleId);
    if (handleElement == null) {
      return;
    }
    const onKeyDown = (event) => {
      if (event.defaultPrevented) {
        return;
      }
      switch (event.key) {
        case "ArrowDown":
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "End":
        case "Home": {
          event.preventDefault();
          resizeHandler(event);
          break;
        }
        case "F6": {
          event.preventDefault();
          const handles = getResizeHandles();
          const index = getResizeHandleIndex(handleId);
          assert(index !== null);
          const nextIndex = event.shiftKey ? index > 0 ? index - 1 : handles.length - 1 : index + 1 < handles.length ? index + 1 : 0;
          const nextHandle = handles[nextIndex];
          nextHandle.focus();
          break;
        }
      }
    };
    handleElement.addEventListener("keydown", onKeyDown);
    return () => {
      handleElement.removeEventListener("keydown", onKeyDown);
    };
  }, [disabled, handleId, resizeHandler]);
}
function areEqual(arrayA, arrayB) {
  if (arrayA.length !== arrayB.length) {
    return false;
  }
  for (let index = 0; index < arrayA.length; index++) {
    if (arrayA[index] !== arrayB[index]) {
      return false;
    }
  }
  return true;
}
function getDragOffset(event, handleId, direction, initialOffset = 0, initialHandleElementRect = null) {
  const isHorizontal = direction === "horizontal";
  let pointerOffset = 0;
  if (isMouseEvent(event)) {
    pointerOffset = isHorizontal ? event.clientX : event.clientY;
  } else if (isTouchEvent(event)) {
    const firstTouch = event.touches[0];
    pointerOffset = isHorizontal ? firstTouch.screenX : firstTouch.screenY;
  } else {
    return 0;
  }
  const handleElement = getResizeHandle(handleId);
  const rect = initialHandleElementRect || handleElement.getBoundingClientRect();
  const elementOffset = isHorizontal ? rect.left : rect.top;
  return pointerOffset - elementOffset - initialOffset;
}
function getMovement(event, groupId, handleId, panelsArray, direction, prevSizes, initialDragState) {
  const {
    dragOffset = 0,
    dragHandleRect,
    sizes: initialSizes
  } = initialDragState || {};
  const baseSizes = initialSizes || prevSizes;
  if (isKeyDown(event)) {
    const isHorizontal = direction === "horizontal";
    const groupElement = getPanelGroup(groupId);
    const rect = groupElement.getBoundingClientRect();
    const groupSizeInPixels = isHorizontal ? rect.width : rect.height;
    const denominator = event.shiftKey ? 10 : 100;
    const delta = groupSizeInPixels / denominator;
    let movement = 0;
    switch (event.key) {
      case "ArrowDown":
        movement = isHorizontal ? 0 : delta;
        break;
      case "ArrowLeft":
        movement = isHorizontal ? -delta : 0;
        break;
      case "ArrowRight":
        movement = isHorizontal ? delta : 0;
        break;
      case "ArrowUp":
        movement = isHorizontal ? 0 : -delta;
        break;
      case "End":
        movement = groupSizeInPixels;
        break;
      case "Home":
        movement = -groupSizeInPixels;
        break;
    }
    const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);
    const targetPanelId = movement < 0 ? idBefore : idAfter;
    const targetPanelIndex = panelsArray.findIndex((panel) => panel.current.id === targetPanelId);
    const targetPanel = panelsArray[targetPanelIndex];
    if (targetPanel.current.collapsible) {
      const baseSize = baseSizes[targetPanelIndex];
      if (baseSize === 0 || baseSize.toPrecision(PRECISION) === targetPanel.current.minSize.toPrecision(PRECISION)) {
        movement = movement < 0 ? -targetPanel.current.minSize * groupSizeInPixels : targetPanel.current.minSize * groupSizeInPixels;
      }
    }
    return movement;
  } else {
    return getDragOffset(event, handleId, direction, dragOffset, dragHandleRect);
  }
}
function isKeyDown(event) {
  return event.type === "keydown";
}
function isMouseEvent(event) {
  return event.type.startsWith("mouse");
}
function isTouchEvent(event) {
  return event.type.startsWith("touch");
}
var currentState = null;
var element = null;
function getCursorStyle(state) {
  switch (state) {
    case "horizontal":
      return "ew-resize";
    case "horizontal-max":
      return "w-resize";
    case "horizontal-min":
      return "e-resize";
    case "vertical":
      return "ns-resize";
    case "vertical-max":
      return "n-resize";
    case "vertical-min":
      return "s-resize";
  }
}
function resetGlobalCursorStyle() {
  if (element !== null) {
    document.head.removeChild(element);
    currentState = null;
    element = null;
  }
}
function setGlobalCursorStyle(state) {
  if (currentState === state) {
    return;
  }
  currentState = state;
  const style = getCursorStyle(state);
  if (element === null) {
    element = document.createElement("style");
    document.head.appendChild(element);
  }
  element.innerHTML = `*{cursor: ${style}!important;}`;
}
function debounce(callback, durationMs = 10) {
  let timeoutId = null;
  let callable = (...args) => {
    if (timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => {
      callback(...args);
    }, durationMs);
  };
  return callable;
}
function getSerializationKey(panels) {
  return panels.map((panel) => {
    const {
      minSize,
      order
    } = panel.current;
    return order ? `${order}:${minSize}` : `${minSize}`;
  }).sort((a, b) => a.localeCompare(b)).join(",");
}
function loadSerializedPanelGroupState(autoSaveId, storage) {
  try {
    const serialized = storage.getItem(`PanelGroup:sizes:${autoSaveId}`);
    if (serialized) {
      const parsed = JSON.parse(serialized);
      if (typeof parsed === "object" && parsed != null) {
        return parsed;
      }
    }
  } catch (error) {
  }
  return null;
}
function loadPanelLayout(autoSaveId, panels, storage) {
  const state = loadSerializedPanelGroupState(autoSaveId, storage);
  if (state) {
    const key = getSerializationKey(panels);
    return state[key] ?? null;
  }
  return null;
}
function savePanelGroupLayout(autoSaveId, panels, sizes, storage) {
  const key = getSerializationKey(panels);
  const state = loadSerializedPanelGroupState(autoSaveId, storage) || {};
  state[key] = sizes;
  try {
    storage.setItem(`PanelGroup:sizes:${autoSaveId}`, JSON.stringify(state));
  } catch (error) {
    console.error(error);
  }
}
var debounceMap = {};
function initializeDefaultStorage(storageObject) {
  try {
    if (typeof localStorage !== "undefined") {
      storageObject.getItem = (name) => {
        return localStorage.getItem(name);
      };
      storageObject.setItem = (name, value) => {
        localStorage.setItem(name, value);
      };
    } else {
      throw new Error("localStorage not supported in this environment");
    }
  } catch (error) {
    console.error(error);
    storageObject.getItem = () => null;
    storageObject.setItem = () => {
    };
  }
}
var defaultStorage = {
  getItem: (name) => {
    initializeDefaultStorage(defaultStorage);
    return defaultStorage.getItem(name);
  },
  setItem: (name, value) => {
    initializeDefaultStorage(defaultStorage);
    defaultStorage.setItem(name, value);
  }
};
function PanelGroupWithForwardedRef({
  autoSaveId,
  children = null,
  className: classNameFromProps = "",
  direction,
  disablePointerEventsDuringResize = false,
  forwardedRef,
  id: idFromProps = null,
  onLayout,
  storage = defaultStorage,
  style: styleFromProps = {},
  tagName: Type = "div",
  units = "percentages"
}) {
  const groupId = useUniqueId(idFromProps);
  const [activeHandleId, setActiveHandleId] = useState(null);
  const [panels, setPanels] = useState(/* @__PURE__ */ new Map());
  const initialDragStateRef = useRef(null);
  const devWarningsRef = useRef({
    didLogDefaultSizeWarning: false,
    didLogIdAndOrderWarning: false,
    didLogInvalidLayoutWarning: false,
    prevPanelIds: []
  });
  const callbacksRef = useRef({
    onLayout
  });
  useEffect(() => {
    callbacksRef.current.onLayout = onLayout;
  });
  const panelIdToLastNotifiedSizeMapRef = useRef({});
  const [sizes, setSizes] = useState([]);
  const panelSizeBeforeCollapse = useRef(/* @__PURE__ */ new Map());
  const prevDeltaRef = useRef(0);
  const committedValuesRef = useRef({
    direction,
    id: groupId,
    panels,
    sizes,
    units
  });
  useImperativeHandle(forwardedRef, () => ({
    getId: () => groupId,
    getLayout: (unitsFromParams) => {
      const {
        sizes: sizes2,
        units: unitsFromProps
      } = committedValuesRef.current;
      const units2 = unitsFromParams ?? unitsFromProps;
      if (units2 === "pixels") {
        const groupSizePixels = getAvailableGroupSizePixels(groupId);
        return sizes2.map((size) => size / 100 * groupSizePixels);
      } else {
        return sizes2;
      }
    },
    setLayout: (sizes2, unitsFromParams) => {
      const {
        id: groupId2,
        panels: panels2,
        sizes: prevSizes,
        units: units2
      } = committedValuesRef.current;
      if ((unitsFromParams || units2) === "pixels") {
        const groupSizePixels = getAvailableGroupSizePixels(groupId2);
        sizes2 = sizes2.map((size) => size / groupSizePixels * 100);
      }
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      const panelsArray = panelsMapToSortedArray(panels2);
      const nextSizes = validatePanelGroupLayout({
        groupId: groupId2,
        panels: panels2,
        nextSizes: sizes2,
        prevSizes,
        units: units2
      });
      if (!areEqual(prevSizes, nextSizes)) {
        setSizes(nextSizes);
        callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
      }
    }
  }), [groupId]);
  useIsomorphicLayoutEffect(() => {
    committedValuesRef.current.direction = direction;
    committedValuesRef.current.id = groupId;
    committedValuesRef.current.panels = panels;
    committedValuesRef.current.sizes = sizes;
    committedValuesRef.current.units = units;
  });
  useWindowSplitterPanelGroupBehavior({
    committedValuesRef,
    groupId,
    panels,
    setSizes,
    sizes,
    panelSizeBeforeCollapse
  });
  useEffect(() => {
    const {
      onLayout: onLayout2
    } = callbacksRef.current;
    const {
      panels: panels2,
      sizes: sizes2
    } = committedValuesRef.current;
    if (sizes2.length > 0) {
      if (onLayout2) {
        onLayout2(sizes2);
      }
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      const panelsArray = panelsMapToSortedArray(panels2);
      callPanelCallbacks(panelsArray, sizes2, panelIdToLastNotifiedSizeMap);
    }
  }, [sizes]);
  useIsomorphicLayoutEffect(() => {
    const {
      id: groupId2,
      sizes: sizes2,
      units: units2
    } = committedValuesRef.current;
    if (sizes2.length === panels.size) {
      return;
    }
    let defaultSizes = null;
    if (autoSaveId) {
      const panelsArray = panelsMapToSortedArray(panels);
      defaultSizes = loadPanelLayout(autoSaveId, panelsArray, storage);
    }
    if (defaultSizes != null) {
      const validatedSizes = validatePanelGroupLayout({
        groupId: groupId2,
        panels,
        nextSizes: defaultSizes,
        prevSizes: defaultSizes,
        units: units2
      });
      setSizes(validatedSizes);
    } else {
      const sizes3 = calculateDefaultLayout({
        groupId: groupId2,
        panels,
        units: units2
      });
      setSizes(sizes3);
    }
  }, [autoSaveId, panels, storage]);
  useEffect(() => {
    if (autoSaveId) {
      if (sizes.length === 0 || sizes.length !== panels.size) {
        return;
      }
      const panelsArray = panelsMapToSortedArray(panels);
      if (!debounceMap[autoSaveId]) {
        debounceMap[autoSaveId] = debounce(savePanelGroupLayout, 100);
      }
      debounceMap[autoSaveId](autoSaveId, panelsArray, sizes, storage);
    }
    {
      const {
        didLogIdAndOrderWarning,
        prevPanelIds
      } = devWarningsRef.current;
      if (!didLogIdAndOrderWarning) {
        const {
          panels: panels2
        } = committedValuesRef.current;
        const panelIds = Array.from(panels2.keys());
        devWarningsRef.current.prevPanelIds = panelIds;
        const panelsHaveChanged = prevPanelIds.length > 0 && !areEqual(prevPanelIds, panelIds);
        if (panelsHaveChanged) {
          if (Array.from(panels2.values()).find((panel) => panel.current.idWasAutoGenerated || panel.current.order == null)) {
            devWarningsRef.current.didLogIdAndOrderWarning = true;
            console.warn(`WARNING: Panel id and order props recommended when panels are dynamically rendered`);
          }
        }
      }
    }
  }, [autoSaveId, panels, sizes, storage]);
  useIsomorphicLayoutEffect(() => {
    if (units === "pixels") {
      const resizeObserver = new ResizeObserver(() => {
        const {
          panels: panels2,
          sizes: prevSizes
        } = committedValuesRef.current;
        const nextSizes = validatePanelGroupLayout({
          groupId,
          panels: panels2,
          nextSizes: prevSizes,
          prevSizes,
          units
        });
        if (!areEqual(prevSizes, nextSizes)) {
          setSizes(nextSizes);
        }
      });
      resizeObserver.observe(getPanelGroup(groupId));
      return () => {
        resizeObserver.disconnect();
      };
    }
  }, [groupId, units]);
  const getPanelSize = useCallback((id, unitsFromParams) => {
    const {
      panels: panels2,
      units: unitsFromProps
    } = committedValuesRef.current;
    const panelsArray = panelsMapToSortedArray(panels2);
    const index = panelsArray.findIndex((panel) => panel.current.id === id);
    const size = sizes[index];
    const units2 = unitsFromParams ?? unitsFromProps;
    if (units2 === "pixels") {
      const groupSizePixels = getAvailableGroupSizePixels(groupId);
      return size / 100 * groupSizePixels;
    } else {
      return size;
    }
  }, [groupId, sizes]);
  const getPanelStyle = useCallback((id, defaultSize) => {
    const {
      panels: panels2
    } = committedValuesRef.current;
    if (panels2.size === 0) {
      {
        if (!devWarningsRef.current.didLogDefaultSizeWarning) ;
      }
      return {
        flexBasis: 0,
        flexGrow: defaultSize != null ? defaultSize : void 0,
        flexShrink: 1,
        // Without this, Panel sizes may be unintentionally overridden by their content.
        overflow: "hidden"
      };
    }
    const flexGrow = getFlexGrow(panels2, id, sizes);
    return {
      flexBasis: 0,
      flexGrow,
      flexShrink: 1,
      // Without this, Panel sizes may be unintentionally overridden by their content.
      overflow: "hidden",
      // Disable pointer events inside of a panel during resize.
      // This avoid edge cases like nested iframes.
      pointerEvents: disablePointerEventsDuringResize && activeHandleId !== null ? "none" : void 0
    };
  }, [activeHandleId, disablePointerEventsDuringResize, sizes]);
  const registerPanel = useCallback((id, panelRef) => {
    const {
      units: units2
    } = committedValuesRef.current;
    validatePanelProps(units2, panelRef);
    setPanels((prevPanels) => {
      if (prevPanels.has(id)) {
        return prevPanels;
      }
      const nextPanels = new Map(prevPanels);
      nextPanels.set(id, panelRef);
      return nextPanels;
    });
  }, []);
  const registerResizeHandle = useCallback((handleId) => {
    const resizeHandler = (event) => {
      event.preventDefault();
      const {
        direction: direction2,
        panels: panels2,
        sizes: prevSizes
      } = committedValuesRef.current;
      const panelsArray = panelsMapToSortedArray(panels2);
      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);
      if (idBefore == null || idAfter == null) {
        return;
      }
      let movement = getMovement(event, groupId, handleId, panelsArray, direction2, prevSizes, initialDragStateRef.current);
      if (movement === 0) {
        return;
      }
      const groupElement = getPanelGroup(groupId);
      const rect = groupElement.getBoundingClientRect();
      const isHorizontal = direction2 === "horizontal";
      if (document.dir === "rtl" && isHorizontal) {
        movement = -movement;
      }
      const size = isHorizontal ? rect.width : rect.height;
      const delta = movement / size * 100;
      const nextSizes = adjustByDelta(event, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, initialDragStateRef.current);
      const sizesChanged = !areEqual(prevSizes, nextSizes);
      if (isMouseEvent(event) || isTouchEvent(event)) {
        if (prevDeltaRef.current != delta) {
          if (!sizesChanged) {
            if (isHorizontal) {
              setGlobalCursorStyle(movement < 0 ? "horizontal-min" : "horizontal-max");
            } else {
              setGlobalCursorStyle(movement < 0 ? "vertical-min" : "vertical-max");
            }
          } else {
            setGlobalCursorStyle(isHorizontal ? "horizontal" : "vertical");
          }
        }
      }
      if (sizesChanged) {
        const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
        setSizes(nextSizes);
        callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
      }
      prevDeltaRef.current = delta;
    };
    return resizeHandler;
  }, [groupId]);
  const unregisterPanel = useCallback((id) => {
    setPanels((prevPanels) => {
      if (!prevPanels.has(id)) {
        return prevPanels;
      }
      const nextPanels = new Map(prevPanels);
      nextPanels.delete(id);
      return nextPanels;
    });
  }, []);
  const collapsePanel = useCallback((id) => {
    const {
      panels: panels2,
      sizes: prevSizes
    } = committedValuesRef.current;
    const panel = panels2.get(id);
    if (panel == null) {
      return;
    }
    const {
      collapsedSize,
      collapsible
    } = panel.current;
    if (!collapsible) {
      return;
    }
    const panelsArray = panelsMapToSortedArray(panels2);
    const index = panelsArray.indexOf(panel);
    if (index < 0) {
      return;
    }
    const currentSize = prevSizes[index];
    if (currentSize === collapsedSize) {
      return;
    }
    panelSizeBeforeCollapse.current.set(id, currentSize);
    const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);
    if (idBefore == null || idAfter == null) {
      return;
    }
    const isLastPanel = index === panelsArray.length - 1;
    const delta = isLastPanel ? currentSize : collapsedSize - currentSize;
    const nextSizes = adjustByDelta(null, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);
    if (prevSizes !== nextSizes) {
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      setSizes(nextSizes);
      callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
    }
  }, []);
  const expandPanel = useCallback((id) => {
    const {
      panels: panels2,
      sizes: prevSizes
    } = committedValuesRef.current;
    const panel = panels2.get(id);
    if (panel == null) {
      return;
    }
    const {
      collapsedSize,
      minSize
    } = panel.current;
    const sizeBeforeCollapse = panelSizeBeforeCollapse.current.get(id) || minSize;
    if (!sizeBeforeCollapse) {
      return;
    }
    const panelsArray = panelsMapToSortedArray(panels2);
    const index = panelsArray.indexOf(panel);
    if (index < 0) {
      return;
    }
    const currentSize = prevSizes[index];
    if (currentSize !== collapsedSize) {
      return;
    }
    const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);
    if (idBefore == null || idAfter == null) {
      return;
    }
    const isLastPanel = index === panelsArray.length - 1;
    const delta = isLastPanel ? collapsedSize - sizeBeforeCollapse : sizeBeforeCollapse;
    const nextSizes = adjustByDelta(null, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);
    if (prevSizes !== nextSizes) {
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      setSizes(nextSizes);
      callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
    }
  }, []);
  const resizePanel = useCallback((id, nextSize, unitsFromParams) => {
    const {
      id: groupId2,
      panels: panels2,
      sizes: prevSizes,
      units: units2
    } = committedValuesRef.current;
    if ((unitsFromParams || units2) === "pixels") {
      const groupSizePixels = getAvailableGroupSizePixels(groupId2);
      nextSize = nextSize / groupSizePixels * 100;
    }
    const panel = panels2.get(id);
    if (panel == null) {
      return;
    }
    let {
      collapsedSize,
      collapsible,
      maxSize,
      minSize
    } = panel.current;
    if (units2 === "pixels") {
      const groupSizePixels = getAvailableGroupSizePixels(groupId2);
      minSize = minSize / groupSizePixels * 100;
      if (maxSize != null) {
        maxSize = maxSize / groupSizePixels * 100;
      }
    }
    const panelsArray = panelsMapToSortedArray(panels2);
    const index = panelsArray.indexOf(panel);
    if (index < 0) {
      return;
    }
    const currentSize = prevSizes[index];
    if (currentSize === nextSize) {
      return;
    }
    if (collapsible && nextSize === collapsedSize) ;
    else {
      const unsafeNextSize = nextSize;
      nextSize = Math.min(maxSize != null ? maxSize : 100, Math.max(minSize, nextSize));
      {
        if (unsafeNextSize !== nextSize) {
          console.error(`Invalid size (${unsafeNextSize}) specified for Panel "${panel.current.id}" given the panel's min/max size constraints`);
        }
      }
    }
    const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);
    if (idBefore == null || idAfter == null) {
      return;
    }
    const isLastPanel = index === panelsArray.length - 1;
    const delta = isLastPanel ? currentSize - nextSize : nextSize - currentSize;
    const nextSizes = adjustByDelta(null, committedValuesRef.current, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);
    if (prevSizes !== nextSizes) {
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      setSizes(nextSizes);
      callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
    }
  }, []);
  const context = useMemo(() => ({
    activeHandleId,
    collapsePanel,
    direction,
    expandPanel,
    getPanelSize,
    getPanelStyle,
    groupId,
    registerPanel,
    registerResizeHandle,
    resizePanel,
    startDragging: (id, event) => {
      setActiveHandleId(id);
      if (isMouseEvent(event) || isTouchEvent(event)) {
        const handleElement = getResizeHandle(id);
        initialDragStateRef.current = {
          dragHandleRect: handleElement.getBoundingClientRect(),
          dragOffset: getDragOffset(event, id, direction),
          sizes: committedValuesRef.current.sizes
        };
      }
    },
    stopDragging: () => {
      resetGlobalCursorStyle();
      setActiveHandleId(null);
      initialDragStateRef.current = null;
    },
    units,
    unregisterPanel
  }), [activeHandleId, collapsePanel, direction, expandPanel, getPanelSize, getPanelStyle, groupId, registerPanel, registerResizeHandle, resizePanel, units, unregisterPanel]);
  const style = {
    display: "flex",
    flexDirection: direction === "horizontal" ? "row" : "column",
    height: "100%",
    overflow: "hidden",
    width: "100%"
  };
  return createElement(PanelGroupContext.Provider, {
    children: createElement(Type, {
      children,
      className: classNameFromProps,
      "data-panel-group": "",
      "data-panel-group-direction": direction,
      "data-panel-group-id": groupId,
      "data-panel-group-units": units,
      style: {
        ...style,
        ...styleFromProps
      }
    }),
    value: context
  });
}
var PanelGroup = forwardRef((props, ref) => createElement(PanelGroupWithForwardedRef, {
  ...props,
  forwardedRef: ref
}));
PanelGroupWithForwardedRef.displayName = "PanelGroup";
PanelGroup.displayName = "forwardRef(PanelGroup)";
function PanelResizeHandle({
  children = null,
  className: classNameFromProps = "",
  disabled = false,
  id: idFromProps = null,
  onDragging,
  style: styleFromProps = {},
  tagName: Type = "div"
}) {
  const divElementRef = useRef(null);
  const callbacksRef = useRef({
    onDragging
  });
  useEffect(() => {
    callbacksRef.current.onDragging = onDragging;
  });
  const panelGroupContext = useContext(PanelGroupContext);
  if (panelGroupContext === null) {
    throw Error(`PanelResizeHandle components must be rendered within a PanelGroup container`);
  }
  const {
    activeHandleId,
    direction,
    groupId,
    registerResizeHandle,
    startDragging,
    stopDragging
  } = panelGroupContext;
  const resizeHandleId = useUniqueId(idFromProps);
  const isDragging = activeHandleId === resizeHandleId;
  const [isFocused, setIsFocused] = useState(false);
  const [resizeHandler, setResizeHandler] = useState(null);
  const stopDraggingAndBlur = useCallback(() => {
    const div = divElementRef.current;
    div.blur();
    stopDragging();
    const {
      onDragging: onDragging2
    } = callbacksRef.current;
    if (onDragging2) {
      onDragging2(false);
    }
  }, [stopDragging]);
  useEffect(() => {
    if (disabled) {
      setResizeHandler(null);
    } else {
      const resizeHandler2 = registerResizeHandle(resizeHandleId);
      setResizeHandler(() => resizeHandler2);
    }
  }, [disabled, resizeHandleId, registerResizeHandle]);
  useEffect(() => {
    if (disabled || resizeHandler == null || !isDragging) {
      return;
    }
    const onMove = (event) => {
      resizeHandler(event);
    };
    const onMouseLeave = (event) => {
      resizeHandler(event);
    };
    const divElement = divElementRef.current;
    const targetDocument = divElement.ownerDocument;
    targetDocument.body.addEventListener("contextmenu", stopDraggingAndBlur);
    targetDocument.body.addEventListener("mousemove", onMove);
    targetDocument.body.addEventListener("touchmove", onMove);
    targetDocument.body.addEventListener("mouseleave", onMouseLeave);
    window.addEventListener("mouseup", stopDraggingAndBlur);
    window.addEventListener("touchend", stopDraggingAndBlur);
    return () => {
      targetDocument.body.removeEventListener("contextmenu", stopDraggingAndBlur);
      targetDocument.body.removeEventListener("mousemove", onMove);
      targetDocument.body.removeEventListener("touchmove", onMove);
      targetDocument.body.removeEventListener("mouseleave", onMouseLeave);
      window.removeEventListener("mouseup", stopDraggingAndBlur);
      window.removeEventListener("touchend", stopDraggingAndBlur);
    };
  }, [direction, disabled, isDragging, resizeHandler, stopDraggingAndBlur]);
  useWindowSplitterResizeHandlerBehavior({
    disabled,
    handleId: resizeHandleId,
    resizeHandler
  });
  const style = {
    cursor: getCursorStyle(direction),
    touchAction: "none",
    userSelect: "none"
  };
  return createElement(Type, {
    children,
    className: classNameFromProps,
    "data-resize-handle-active": isDragging ? "pointer" : isFocused ? "keyboard" : void 0,
    "data-panel-group-direction": direction,
    "data-panel-group-id": groupId,
    "data-panel-resize-handle-enabled": !disabled,
    "data-panel-resize-handle-id": resizeHandleId,
    onBlur: () => setIsFocused(false),
    onFocus: () => setIsFocused(true),
    onMouseDown: (event) => {
      startDragging(resizeHandleId, event.nativeEvent);
      const {
        onDragging: onDragging2
      } = callbacksRef.current;
      if (onDragging2) {
        onDragging2(true);
      }
    },
    onMouseUp: stopDraggingAndBlur,
    onTouchCancel: stopDraggingAndBlur,
    onTouchEnd: stopDraggingAndBlur,
    onTouchStart: (event) => {
      startDragging(resizeHandleId, event.nativeEvent);
      const {
        onDragging: onDragging2
      } = callbacksRef.current;
      if (onDragging2) {
        onDragging2(true);
      }
    },
    ref: divElementRef,
    role: "separator",
    style: {
      ...style,
      ...styleFromProps
    },
    tabIndex: 0
  });
}
PanelResizeHandle.displayName = "PanelResizeHandle";
export {
  Panel,
  PanelGroup,
  PanelResizeHandle,
  getAvailableGroupSizePixels
};
//# sourceMappingURL=react-resizable-panels.js.map
